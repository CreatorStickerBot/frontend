# This is a basic workflow to help you get started with Actions

name: Push To Yandex Cloud CR

# Controls when the action will run. 
on:
  release:
    types: [created]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v0.1-alpha
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}


      - name: Build, tag, and push image to Yandex Cloud Container Registry
        env:
          CR_REGISTRY: ${{ secrets.CR_REGISTRY }}
          CR_REPOSITORY: yc-cr-creator-sticker-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG --build-arg API_URL=${{ secrets.YC_API_URL }} .
          docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Deploy on VM
        env:
          VM_USER: ${{ secrets.VM_USER }}
          VM_HOST: ${{ secrets.VM_HOST }}
          CR_REGISTRY: ${{ secrets.CR_REGISTRY }}
          CR_REPOSITORY: yc-cr-creator-sticker-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ssh $VM_USER@$VM_HOST \
            sudo docker pull cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG \
            sudo docker run -d -p 80:80 $CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
